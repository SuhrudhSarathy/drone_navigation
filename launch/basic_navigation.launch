<?xml version="1.0"?>
<launch>
	<!--launch file for mav-->
	<arg name="mav_name" default="firefly"/>
  	<arg name="world_name" default="basic"/>
	<arg name="enable_logging" default="false" />
	<arg name="enable_ground_truth" default="true" />
	<arg name="log_file" default="$(arg mav_name)" />

	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
		<!-- <arg name="debug" value="true"/> -->
		<arg name="paused" value="true"/>
		<!-- <arg name="gui" value="false"/> -->
	</include>

	<group ns="$(arg mav_name)">
		<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		  <arg name="mav_name" value="$(arg mav_name)" />
		  <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
		  <arg name="enable_logging" value="$(arg enable_logging)" />
		  <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		  <arg name="log_file" value="$(arg log_file)"/>
		</include>
		<node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
		  <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
		  <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
		  <remap from="odometry" to="vi_sensor/ground_truth/odometry" />
		</node>
		<node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	</group>
	<!--launch for mav ends-->

	<!--Navigation begins-->
	<!--
	<node name="point_cloud_extraction" type="pcl_extracter_node" pkg="drone_navigation">
		<remap from="input" to="/firefly/vi_sensor/camera_depth/depth/points"/>
	</node>
	<node name="collision_checker" type="collision_checker_node" pkg="drone_navigation">
		<remap from="input" to="/points"/>
	</node>
	-->
	<!--<node name="planner" type="rrt.py" pkg="drone_navigation" output="screen"/>-->
	<!--
	<node name="trajectory_optimiser" type="trajectory_optimiser.py" pkg="drone_navigation" output="screen"/>
	-->

	<arg name="voxel_size" default="0.20"/>
	<arg name="voxels_per_side" default="16"/>
	<arg name="world_frame" default="world"/>

	<node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="log">
		<remap from="pointcloud" to="realsense/depth/color/points"/>
		<remap from="voxblox_node/esdf_map_out" to="esdf_map"/>
		<param name="tsdf_voxel_size" value="$(arg voxel_size)" />
	      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
	      <param name="publish_esdf_map" value="true" />
	      <param name="publish_pointclouds" value="true" />
	      <param name="use_tf_transforms" value="true" />
	      <param name="update_mesh_every_n_sec" value="1.0" />
	      <param name="clear_sphere_for_planning" value="true" />
	      <param name="world_frame" value="$(arg world_frame)" />
	</node>

	<node name="commander" type="commander_node" pkg="drone_navigation" output="screen">
		<remap from="esdf_map_in" to="esdf_map"/>
		<remap from="pointcloud" to="realsense/depth/color/points"/>
		<remap from="trajectory" to="/firefly/command/trajectory"/>
		<remap from="odometry" to="/firefly/ground_truth/odometry"/>
	</node>
</launch>
